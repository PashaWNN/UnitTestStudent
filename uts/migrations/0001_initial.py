# Generated by Django 3.2.3 on 2021-05-18 14:54

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False, help_text='Пользователь, являющийся студентом может загружать решения, но не может просматривать среды выполнения и чужие решения', verbose_name='Студент')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True, verbose_name='Название')),
                ('description', models.TextField(help_text='Инструкция по использованию данной среды выполнения', verbose_name='Описание')),
                ('docker_image', models.CharField(max_length=512, verbose_name='Имя Docker-образа')),
                ('command', models.CharField(max_length=512, verbose_name='Команда для запуска тестов')),
                ('tests_filename', models.CharField(max_length=512, verbose_name='Имя файла с тестами')),
                ('solution_filename', models.CharField(max_length=512, verbose_name='Имя файла-решения')),
            ],
            options={
                'verbose_name': 'Среда выполнения',
                'verbose_name_plural': 'среды выполнения',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512, unique=True, verbose_name='Название')),
                ('description', models.TextField(help_text='Описание требований к задаче, а также того, в каком виде нужно загружать решение', verbose_name='Описание задачи')),
                ('cpu_limit', models.PositiveSmallIntegerField(default=2, help_text='Ограничение реального времени будет в 5 раз выше ограничения процессорного', verbose_name='Ограничение процессорного времени')),
                ('memory_limit', models.PositiveSmallIntegerField(default=64, help_text='Для всей среды выполнения, а не только для процесса тестов', verbose_name='Ограничение объёма используемой ОЗУ (МБ)')),
                ('tests_file', models.FileField(upload_to='uploads', verbose_name='Файл с тестами для задачи')),
                ('environment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='uts.environment', verbose_name='Среда выполнения')),
            ],
            options={
                'verbose_name': 'Задача',
                'verbose_name_plural': 'задачи',
            },
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, verbose_name='Загружено')),
                ('solution_file', models.FileField(upload_to='uploads', verbose_name='Файл с решением')),
                ('state', models.CharField(choices=[('NEW', 'Добавлено'), ('RUN', 'Выполняется'), ('FAI', 'Провалено'), ('COM', 'Завершено успешно')], default='NEW', max_length=3, verbose_name='Состояние')),
                ('log', models.TextField(blank=True, default='', verbose_name='Лог')),
                ('checked', models.BooleanField(default=False, verbose_name='Зачтено')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор решения')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uts.task', verbose_name='Задача')),
            ],
            options={
                'verbose_name': 'Решение',
                'verbose_name_plural': 'решения',
            },
        ),
    ]
